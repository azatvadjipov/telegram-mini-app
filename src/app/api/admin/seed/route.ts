import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function POST() {
  try {
    console.log('üå± Starting database seeding...')

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = [
      { key: 'site_title', value: 'Telegram Mini App' },
      { key: 'site_description', value: '–ì–µ–π—Ç–µ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' },
      { key: 'support_email', value: 'support@example.com' },
    ]

    for (const setting of settings) {
      await prisma.setting.upsert({
        where: { key: setting.key },
        update: setting,
        create: setting,
      })
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pages = [
      {
        slug: 'welcome',
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
        excerpt: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç',
        contentMd: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **Markdown** –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- **–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è** —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- **–ü—Ä–µ–º–∏—É–º** –∫–æ–Ω—Ç–µ–Ω—Ç
- **–†—É—Å—Å–∫–∏–π** –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Tribute
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

---

*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ*`,
        status: 'published',
        access: 'public',
        sort: 0,
      },
      {
        slug: 'premium-content',
        title: '–ü—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç',
        excerpt: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
        contentMd: `# –ü—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç

üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç—É.

## –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.

### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏

- ‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
- ‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- ‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

---

*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíù*`,
        status: 'published',
        access: 'premium',
        sort: 1,
      },
    ]

    for (const page of pages) {
      await prisma.page.upsert({
        where: { slug: page.slug },
        update: page,
        create: page,
      })
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.userAccess.upsert({
      where: { telegramUserId: '123456789' },
      update: {
        isActive: true,
        updatedAt: new Date(),
      },
      create: {
        telegramUserId: '123456789',
        isActive: true,
      },
    })

    console.log('‚úÖ Database seeding completed')

    return NextResponse.json({
      success: true,
      message: 'Database seeded successfully',
      data: {
        settingsCreated: settings.length,
        pagesCreated: pages.length,
        usersCreated: 1,
      },
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('‚ùå Seeding error:', error)

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Seeding failed',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Use POST method to seed database',
    endpoint: '/api/admin/seed',
    method: 'POST',
    note: 'This will create test data in your database'
  })
}
