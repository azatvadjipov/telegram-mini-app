import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    console.log('üìÑ Page request started')

    const { searchParams } = new URL(request.url)
    const slug = searchParams.get('slug')

    if (!slug) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–∞–º–µ—Ç—Ä slug –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      )
    }

    console.log('üìÑ Requested slug:', slug)

    // Return mock data based on slug - no database queries or JWT verification
    let page;

    if (slug === 'welcome') {
      page = {
        id: 'mock-welcome',
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
        excerpt: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç',
        contentMd: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **Markdown** –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- **–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è** —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- **–ü—Ä–µ–º–∏—É–º** –∫–æ–Ω—Ç–µ–Ω—Ç
- **–†—É—Å—Å–∫–∏–π** –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Tribute
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

---

*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ*`,
        access: 'public',
        updatedAt: new Date().toISOString()
      }
    } else if (slug === 'premium-content') {
      page = {
        id: 'mock-premium',
        title: '–ü—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç',
        excerpt: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
        contentMd: `# –ü—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç

üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç—É.

## –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.

### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏

- ‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
- ‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- ‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

---

*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíù*`,
        access: 'premium',
        updatedAt: new Date().toISOString()
      }
    } else {
      return NextResponse.json(
        { error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    console.log('üìÑ Returning mock page for slug:', slug)
    return NextResponse.json({ page })

  } catch (error) {
    console.error('‚ùå Page fetch error:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã' },
      { status: 500 }
    )
  }
}
