import { NextRequest, NextResponse } from 'next/server'
import { prisma, PageStatus, PageAccess } from '@/lib/prisma'
import { cache } from '@/lib/cache'
import { verifyJWT } from '@/lib/jwt'

export async function GET(request: NextRequest) {
  try {
    console.log('üìÑ Page request started')

    const { searchParams } = new URL(request.url)
    const slug = searchParams.get('slug')

    if (!slug) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–∞–º–µ—Ç—Ä slug –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      )
    }

    console.log('üìÑ Requested slug:', slug)

    // Check authorization for premium content access
    const authHeader = request.headers.get('authorization')
    let isSubscribed = false

    if (authHeader?.startsWith('Bearer ')) {
      const token = authHeader.substring(7)
      try {
        const payload = await verifyJWT(token)
        isSubscribed = payload?.isSubscribed || false
        console.log('üìÑ User subscription status:', isSubscribed)
      } catch (error) {
        console.log('üìÑ JWT verification failed:', error)
      }
    }

    // Check cache first
    const cacheKey = `page:${slug}:${isSubscribed}`
    let page: any = await cache.get(cacheKey)

    // Ensure page is properly typed
    if (page && typeof page !== 'object') {
      console.log('üìÑ Invalid cached page data, treating as not cached')
      page = null
    }

    if (!page) {
      console.log('üì° Fetching page from database...')

      // Fetch page from database
      const dbPage = await prisma.page.findUnique({
        where: {
          slug,
          status: PageStatus.published,
        },
        select: {
          id: true,
          slug: true,
          title: true,
          excerpt: true,
          contentMd: true,
          access: true,
          updatedAt: true,
        },
      })

      if (!dbPage) {
        console.log('üìÑ Page not found:', slug)
        return NextResponse.json(
          { error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
          { status: 404 }
        )
      }

      // Check if user has access to premium content
      if (dbPage.access === PageAccess.premium && !isSubscribed) {
        console.log('üìÑ Premium content access denied for slug:', slug)
        return NextResponse.json(
          { error: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω' },
          { status: 403 }
        )
      }

      page = {
        id: dbPage.id,
        title: dbPage.title,
        excerpt: dbPage.excerpt,
        contentMd: dbPage.contentMd,
        access: dbPage.access,
        updatedAt: dbPage.updatedAt.toISOString()
      }

      // Cache for 5 minutes
      await cache.set(cacheKey, page, 300)
      console.log('üíæ Page cached')
    } else {
      console.log('‚úÖ Using cached page')
    }

    console.log('üìÑ Returning page for slug:', slug)
    return NextResponse.json({ page })

  } catch (error) {
    console.error('‚ùå Page fetch error:', error)

    // Return mock data as fallback for resilience
    console.log('üìÑ Using mock data as fallback')
    const mockPage = {
      id: 'mock-welcome',
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
      excerpt: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç',
      contentMd: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **Markdown** –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- **–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è** —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- **–ü—Ä–µ–º–∏—É–º** –∫–æ–Ω—Ç–µ–Ω—Ç
- **–†—É—Å—Å–∫–∏–π** –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Tribute
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

---

*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ*`,
      access: 'public',
      updatedAt: new Date().toISOString()
    }

    return NextResponse.json({ page: mockPage })
  }
}
